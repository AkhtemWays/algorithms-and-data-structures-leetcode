package backtracking.MakeArrayNondecreasingorNonincreasing;

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class Main {
    private static int max;
    private static int min;
    private static void test1() {
        int[] nums = {3,2,4,5,0};
        System.out.println(convertArray(nums));
    }
    private static void test2() {
        int[] nums = {2,2,3,4};
        System.out.println(convertArray(nums));
    }
    private static void test3() {
        int[] nums = {1, 5, 10, 3, 4, 3, 2};
        System.out.println(convertArray(nums));
    }
    private static void test4() {
        int[] nums = {857,3,382,494,241,740,363,966,407,335,395,439,220,87,400,178,406,9,69,976,603,700,430,266,77,115,609,394,706,942,903,81,303,83,276,
                968,262,14,901,755,694,841,675,688,76,887,28,787,824,412,995,139,172,627,496,281,574,611,28,717,58,451,177,103,114,509,141,946,240,91,1000,
                457,464,459,315,103,612,504,994,202,425,253,177,759,430,431,243,689,971,821,778,880,498,813,661,408,997,832,651,932,203,463,882,708,656,507,
                995,771,590,303,856,508,902,897,660,727,169,338,399,544,675,116,90,113,23,485,858,571,708,527,28,853,468,852,105,805,891,868,206,277,977,982,
                195,586,280,487,230,794,844,59,720,497,323,738,550,993,712,727,916,428,687,838,481,172,745,76,883,25,666,780,534,420,779,601,123,850,220,233,
                957,325,805,227,74,771,590,138,153,698,254,539,9,500,814,515,758,958,938,432,432,988,835,145,753,498,663,313,222,178,927,15,667,593,439,6,
                478,928,285,226,580,128,198,190,97,630,294,229,333,925,805,444,689,691,957,710,673,153,466,236,87,87,626,340,391,52,579,954,316,941,783,401,
                667,842,19,166,518,112,848,29,855,765,811,301,600,435,664,304,30,168,88,260,256,522,65,198,554,49,112,365,130,806,621,666,931,129,490,331,
                929,768,425,118,631,604,876,532,848,490,233,570,5,931,752,43,428,807,400,728,172,939,356,969,455,150,57,943,912,342,489,651,230,232,675,
                684,669,133,439,574,276,537,55,733,871,296,366,903,548,384,730,83,315,225,114,480,376,179,128,852,653,386,509,647,447,894,819,164,344,294,
                393,536,825,257,245,201,0,370,313,393,765,574,926,356,372,406,727,601,398,0,350,770,958,204,275,82,222,95,738,448,300,4,602,877,262,
                570,655,738,598,445,313,920,883,564,444,910,388,58,108,574,871,702,704,799,130,977,424,286,614,741,858,636,622,968,322,773,481,891,547,
                40,728,681,193,983,554,222,709,909,906,47,917,242,597,61,651,631,814,702,93,177,805,890,700,777,675,675,119,700,609,991,62,517,839,960,
                344,645,197,245,706,808,108,478,87,76,156,632,411,664,332,191,218,861,811,830,902,248,939,123,677,170,668,510,311,333,707,303,163,332,460,
                150,878,384,781,949,1,747,618,926,135,723,361,999,62,351,181,213,714,596,576,169,703,684,358,509,128,648,277,721,825,91,964,40,481,852,693,
                76,776,759,675,82,550,485,214,447,974,916,842,17,12,431,176,333,107,550,259,529,239,738,785,909,24,625,314,185,427,239,969,261,535,175,87,
                9,208,668,121,127,329,71,394,550,697,755,602,25,504,184,918,114,371,554,595,43,624,968,359,125,140,113,349,517,101,978,440,328,750,755,582,17,766,561,357,698,417,929,383,355,921,698,106,129,121,848,343,528,495,608,779,372,31,291,137,868,445,212,834,390,711,50,518,413,580,973,226,518,311,407,559,104,506,81,823,110,279,175,866,854,723,512,906,31,793,313,66,818,826,769,955,261,575,277,15,126,28,752,998,904,902,933,667,529,737,201,744,538,765,239,529,202,876,441,247,960,530,288,835,191,109,586,838,572,632,602,140,885,414,526,226,659,836,537,114,93,572,177,555,143,610,733,576,524,415,671,113,82,551,795,916,521,613,631,150,591,965,853,59,236,716,132,628,16,967,101,982,658,883,99,595,196,406,260,19,97,387,635,425,772,206,289,428,24,324,87,707,773,106,713,309,266,517,56,867,460,477,452,399,594,325,597,153,503,431,863,554,405,984,301,12,16,490,821,873,153,114,355,75,257,738,27,197,269,969,409,877,603,566,917,485,46,29,792,106,45,180,271,427,2,395,254,859,645,914,998,403,883,828,367,102,554,579,987,309,424,335,935,318,309,562,740,927,545,914,616,558,914,849,544,533,710,736,258,555,984,42,979,788,910,625,501,83,122,946,368,362,511,131,13,683,315,569,863,130,581,43,97,425,178,819,57,838,474,331,439,568,197,733,595,502,376,163,116,584,893,906,850,95,662,16,127,828,311,306,163,462,566,690,746,963,309,607,754,157,995,288,327,231,968,48,285,694,307,758,38,721,146,702,851,192,178,942,299,384,870,640,303,780,233,171,381,962,615,253,590,46,723,166,328,922,760,347,143,68,167,876,858,603,786,276,717,289,391,193,176,876,720,601,205,619,107,646,819,361,193,654,988,533,678,231,713,173,553,494,207,224,77,233,10,927,653,189,166,686,142,635,452,271,614,769,369,338,931,170,889,117,143};
        long start = System.currentTimeMillis();
        System.out.println(convertArray(nums));
        System.out.println(System.currentTimeMillis() - start);
    }
    public static void main(String[] args) {
//        test1();
//        test2();
        test3();
        test4();
    }

    public static int convertArray(int[] nums) {
        int n = nums.length;
        int res1 = 0;
        int res2 = 0;
        Queue<Integer> ascending = new PriorityQueue<>((a, b) -> b - a);
        Queue<Integer> descending = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            if (!ascending.isEmpty() && ascending.peek() >= nums[i]) {
                res1 += ascending.peek() - nums[i];
                ascending.remove();
                ascending.add(nums[i]);
            }
            if (!descending.isEmpty() && descending.peek() <= nums[i]) {
                res2 += nums[i] - descending.peek();
                descending.remove();
                descending.add(nums[i]);
            }
            ascending.add(nums[i]);
            descending.add(nums[i]);
        }

        return Math.min(res1, res2);
    }
}
